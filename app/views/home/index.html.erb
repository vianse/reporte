<!DOCTYPE html>
<!--[if IE 8]> <html lang="en" class="ie8"> <![endif]-->
<!--[if !IE]><!-->
<html lang="en">
<!--<![endif]-->
<head>
	<meta charset="utf-8" />
	<title>Pronostic</title>
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" />
	<meta content="" name="description" />
	<meta content="" name="author" />
    <!-- ================== BEGIN BASE CSS STYLE ================== -->
  <link href="http://fonts.googleapis.com/css?family=Nunito:400,300,700" rel="stylesheet" id="fontFamilySrc" />
  <link href="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447734615/jquery-ui.min.css" rel="stylesheet" />
  <link href="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447734729/bootstrap.min.css" rel="stylesheet" />
  <link href="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447735152/animate.min.css" rel="stylesheet" />
  <link href="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447735249/style.min.css" rel="stylesheet" />
  <!-- ================== END BASE CSS STYLE ================== -->
  
  <!-- ================== BEGIN PAGE LEVEL CSS STYLE ================== -->
    <link href="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447735472/jquery.gritter.css" rel="stylesheet" />  
  <!-- ================== END PAGE LEVEL CSS STYLE ================== -->
    
  <!-- ================== BEGIN BASE JS ================== -->
  <!--<script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447735628/pace.min.js"></script>-->
  <!-- ================== END BASE JS ================== -->

	
	<!--[if lt IE 9]>
	    <script src="assets/crossbrowserjs/excanvas.min.js"></script>
	<![endif]-->
</head>
<style type="text/css">
.visible{
    display: none;
}
a.font{
	font-size: 16px;
}
.font{
	font-size: 16px;
}
.verde{
	color: #00A896;
}
</style>
<body>
	<!-- begin #page-loader -->
	<div id="page-loader" class="page-loader fade in"><span class="spinner">Loading...</span></div>
	<!-- end #page-loader -->

	<!-- begin #page-container -->
	<div id="page-container" class="fade page-container page-header-fixed page-sidebar-fixed page-with-two-sidebar page-with-footer">
		<!-- begin #header -->
		<div id="header" class="header navbar navbar-default navbar-fixed-top">
			<!-- begin container-fluid -->
			<div class="container-fluid">
				<!-- begin mobile sidebar expand / collapse button -->
				<div class="navbar-header">
					<a href="/" class="navbar-brand">Pronostic</a>
					<button type="button" class="navbar-toggle" data-click="sidebar-toggled">
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>
				<!-- end mobile sidebar expand / collapse button -->
				
				<!-- begin navbar-right -->
				<ul class="nav navbar-nav navbar-right">
					<li class="dropdown navbar-user">
						<a href="javascript:;" class="dropdown-toggle" data-toggle="dropdown">
							<span class="hidden-xs"><%= current_user.email %></span> <b class="caret"></b>
						</a>
						<ul class="dropdown-menu pull-right">
							<li><a href="/users/edit">Seguridad</a></li>
							<li class="divider"></li>
							<li><%= link_to "Cerrar sesión", destroy_user_session_path, method: :delete  %></li>
						</ul>
					</li>
				</ul>
				<!-- end navbar-right -->
			</div>
			<!-- end container-fluid -->
		</div>
		<!-- end #header -->
		
		<!-- begin #sidebar -->
		<div id="sidebar" class="sidebar">
			<!-- begin sidebar scrollbar -->
			<div data-scrollbar="true" data-height="100%">
				<!-- begin sidebar nav -->
				<ul class="nav">
					<li class="nav-header">Navegación</li>
					<li class="has-sub active">
						<a href="javascript:;">
						    <b class="caret pull-right"></b>
						    <i class="fa fa-home"></i>
						    <span>Inicio <span class="label label-theme m-l-3">Bienvenidos</span></span>
					    </a>
					    <ul class="sub-menu">
                         
                            <% if @apps == 1 || @apps == 0 %>
					        <li class="active"><a href="/sucursales?type=Servicio">Operación Servicio</a></li>
                            <li><a href="/settings?app_id=<%= @parametro %>&type=<%= @tipo %>">Configuración <i class="fa fa-cogs text-theme m-l-3"></i></a></li>

                            <li><a href="/objetivos?app_id=<%= @parametro %>&type=<%= @tipo %>">Periodos y objetivos <i class="fa fa-calendar text-theme m-l-3"></i></a></li>
                            <% end %>
                            <% if @apps_g > 1  %>
                            <li><a href="/general?group_id=<%= @grupo %>">Resumen Grupo <i class="fa fa-file-text-o text-theme m-l-3"></i></a></li>
                            <li><a href="/sucursales?type=Servicio">Operación Servicio <i class="fa fa-building text-theme m-l-3"></i></a></li>
                            <li><a href="/sucursales?type=HYP">Operación HYP <i class="fa fa-wrench text-theme m-l-3"></i></a></li>
                            <% end %>
                            
					        
                            
					    </ul>
					</li>
				</ul>
				<!-- end sidebar nav -->
			</div>
			<!-- end sidebar scrollbar -->
		</div>
		<div class="sidebar-bg"></div>
		<!-- end #sidebar -->
		
		<!-- begin #content -->
		<div id="content" class="content">
            <div id="alerta"></div>
            <% if @objetivo.blank? %>
            <div class="alert alert-danger fade in">
                            <strong>Error!</strong>
                            Falta configurar los objetivos de este mes <a href="objetivos?app_id=<%= @parametro %>&type=Servicio"> da click aquí para configurarlos</a>
                            <span class="close" data-dismiss="alert">×</span>
            </div>
            <% else %>
            
            <% end %>
          
			<!-- begin breadcrumb -->
			<ol class="breadcrumb pull-right">
				<li><a href="javascript:;">Home</a></li>
				<li class="active">Operación Servicio</li>
			</ol>
			<!-- end breadcrumb -->
			<!-- begin page-header -->
			<h1 class="page-header"><span id="empresa"></span> <small id="fecha"></small></h1>
			<!-- end page-header -->
			<div class="panel panel-white overflow-hidden m-b-10">
                <div class="panel-heading">
                     <h4 class="panel-title">Tú objetivo de venta obligado para este mes es de: <strong><span id="objetivo"></span></strong></h4>
                     <h4 class="panel-title">Tú objetivo ideal para este mes es de:  <strong><span id="objetivo_real"></span></strong></h4>
                </div>
            </div>
              
            
            <!-- begin row -->
            <div class="row">
                <!-- begin col-6 -->
                <div class="col-md-6">
                    <!-- begin widget -->
                    <div class="panel">
                            <ul class="nav nav-tabs">
                                <li class="active"><a href="#" class="font" data-toggle="tab">Venta Pendiente (Sin Facturar)</a></li>
                            </ul>
                            <div class="tab-content m-b-0">
                                <div class="tab-pane fade active in" id="default-tab-1">
                                    <p class="lead m-b-10 font">
                                        Al día de hoy tienes <strong><span id="ordenes_abiertas"></span></strong> orden(es) de servicio abierta(s), con un costo de <strong><span id="costo"></span> </strong>
                                    </p>
                                    <p class="m-b-20">
                                        
										Las ordenes INTERNAS ascienden a
										<strong><span id="costo_internas"></span></strong> 
										en <strong><span id="ordenes_internas" class="float internas-color"></span></strong>
										orden(es) 
                                    </p>
                                    <div class="text-left">
                                        <div id="detalles"></div>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                    <!-- end widget -->
                </div>
                <!-- end col-6 -->
                <!-- begin col-6 -->
                <div class="col-md-6">
                    <!-- begin widget -->
                    <div class="panel">
                            <ul class="nav nav-tabs">
                                <li class="active"><a href="#" class="font" data-toggle="tab">Venta Facturada Actual</a></li>
                            </ul>
                            <div class="tab-content m-b-0">
                                <div class="tab-pane fade active in" id="default-tab-1">
                                    <p class="lead m-b-10">
                                        Total <strong><span id="facturadas" class="verde"></span></strong> MXN
                                    </p>
                                    <p class="m-b-20">
                                        Porcentaje de cumplimiento del objetivo 
                                    </p>
                                    <div class="text-left">
                                        <div id="progress"></div>
										<canvas id="cvs" class="margin-left" width="200" height="25">
										</canvas><br><br><br>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                    <!-- end widget -->
                </div>
                <!-- end col-6 -->
            </div>
            <!-- end row -->

            			<div class="panel">
                            <ul class="nav nav-tabs">
                                <li class="active"><a href="#" class="font" data-toggle="tab">Pronósticos</a></li>
                            </ul>
                            <div class="tab-content m-b-0">
                                <div class="tab-pane fade active in" id="default-tab-1">
                                    <p class="lead m-b-10 font">
                                        <span id="contador" class="float-1"></span> orden(es) de servicio mayor(es) a <span id="o"></span>
                                    </p>
                                    <div class="text-left">
                                        <div id="detalles_mayores"></div>
                                    </div>
                                </div>
                                
                            </div>
                        </div>

                        <div class="panel panel-white overflow-hidden m-b-10">
			                <div class="panel-heading">
			                     <h2 class="panel-title font">Estimado concesionario</h2>
			                     <h4 class="panel-title">Si usted factura la(s) orden(es) de servicio No:
									<span id="ordenes_recomendadas" class="float-2"></span></h4>
			                </div>
			            </div>

              <!-- begin row -->
            <div class="row">
                <!-- begin col-6 -->
                  <div class="col-md-6">
                    <!-- begin widget -->
                    <div class="panel">
                            <ul class="nav nav-tabs">
                                <li class="active"><a href="#" class="font" data-toggle="tab">Venta Sugerida <span class="verde">(Es suma de los valores en verde)</span></a></li>
                            </ul>
                            <div class="tab-content m-b-0">
                                <div class="tab-pane fade active in" id="default-tab-1">
                                    <p class="lead m-b-10">
                                         <strong><span id="total_pronostico"></span></strong>
                                    </p>
                                    <p class="m-b-20">
                                      <strong><span id="importe_facturado"></span></strong>
                                    </p>
                                    <div class="text-left">
										<canvas id="objetivo_progress" width="200" height="25">
										</canvas>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                    <!-- end widget -->
                </div>
                
                <!-- end col-6 -->
                <!-- begin col-6 -->
              <div class="col-md-6">
                    <!-- begin widget -->
                    <div class="panel">
                            <ul class="nav nav-tabs">
                                <li class="active"><a href="#" class="font" data-toggle="tab">Venta Pendiente(Sin Facturar)</a></li>
                            </ul>
                            <div class="tab-content m-b-0">
                                <div class="tab-pane fade active in" id="default-tab-1">
                                    <p class="lead m-b-10 font">
                                        Le quedarían <strong><span id="conteo"></span></strong> ordenes por cerrar equivalentes a un costo de <strong>
									 				<span id="rest"></span>
		 										</strong> MXN
                                    </p>
                                    <p class="m-b-20">
                                       Cumplimiento del objetivo a 0 ordenes
                                    </p>
                                    <div class="text-left">
                                        <canvas id="ordenes_cero" width="200" height="25"></canvas>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                    <!-- end widget -->
                </div>
                <!-- end col-6 -->
            </div>
            <!-- end row -->


			<!-- begin row -->

            <!-- end row -->
            
            <!-- begin row -->

            <!-- end row -->
			
            <!-- begin #footer -->
            <div id="footer" class="footer">
                <span class="pull-right">
                    <a href="javascript:;" class="btn-scroll-to-top" data-click="scroll-top">
                        <i class="fa fa-arrow-up"></i> <span class="hidden-xs">Back to Top</span>
                    </a>
                </span>
                &copy; 2015 <b>vianse</b> All Right Reserved
            </div>
            <!-- end #footer -->
		</div>
		<!-- end #content -->
		
		<!-- begin #sidebar-right -->
		
		<!-- end #sidebar-right -->
	</div>
	<!-- end page container -->
	
    <!-- begin theme-panel -->
    <!-- end theme-panel -->
<!-- ================== BEGIN BASE JS ================== -->
  <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447732895/jquery-1.9.1.js"></script>
  <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447733033/jquery-migrate-1.1.0.min.js"></script>
  <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447733159/jquery-ui.min.js"></script>
  <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447733251/bootstrap.min.js"></script>
  <!--[if lt IE 9]>
    <script src="assets/crossbrowserjs/html5shiv.js"></script>
    <script src="assets/crossbrowserjs/respond.min.js"></script>
  <![endif]-->
  <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447733386/jquery.slimscroll.min.js"></script>
  <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447733489/jquery.cookie.js"></script>
  <!-- ================== END BASE JS ================== -->
  
  <!-- ================== BEGIN PAGE LEVEL JS ================== -->
  <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447733913/bootstrap_calendar.min.js"></script>
  <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447733996/jquery.sparkline.min.js"></script>
  <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447734296/jquery.gritter.js"></script>
    <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447734361/page-index.demo.js"></script>
    <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447733809/demo.js"></script>
    <script src="https://res.cloudinary.com/dnubgpeun/raw/upload/v1447732638/apps.js"></script>
  <!-- ================== END PAGE LEVEL JS ================== -->
	
	<script>
		$(document).ready(function() {
		    App.init();
		    Demo.init();
		    //PageDemo.init();
		});
	</script>
</body data-no-turbolink data-no-transition-cache>
</html>

<script type="text/javascript">
	function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
				  if (typeof stroke == "undefined" ) {
					stroke = true;
				  }
				  if (typeof radius === "undefined") {
					radius = 5;
				  }
				  
				  //edge clearing
				  
				  var gdest = ctx.globalCompositeOperation;
				  var fstyle = ctx.fillStyle;
				  ctx.globalCompositeOperation = "destination-out";			  
				  ctx.fillStyle = "#FF686B";
				 
				  ctx.beginPath();
				  ctx.moveTo(x, y+radius);
				  ctx.quadraticCurveTo(x, y, x + radius, y);
				  ctx.lineTo(x, y);
				  ctx.lineTo(x, y+radius);			 
				  ctx.closePath(); 		
				  ctx.fill();
				  
				  ctx.beginPath();
				  ctx.moveTo(x, y+height-radius);
				  ctx.quadraticCurveTo(x, y+height, x + radius, y+height);
				  ctx.lineTo(x, y+height);
				  ctx.lineTo(x, y+height-radius);			 
				  ctx.closePath(); 		
				  ctx.fill();
				  
				  ctx.beginPath();
				  ctx.moveTo(x+width-radius, y);
				  ctx.quadraticCurveTo(x+width, y, x + width, y+radius);
				  ctx.lineTo(x+width, y);
				  ctx.lineTo(x+width-radius, y);			 
				  ctx.closePath(); 		
				  ctx.fill();
				  
				  ctx.beginPath();
				  ctx.moveTo(x+width, y+height-radius);
				  ctx.quadraticCurveTo(x+width, y+height, x+width - radius, y+height);
				  ctx.lineTo(x+width, y+height);
				  ctx.lineTo(x+width, y+height-radius);			 
				  ctx.closePath(); 		
				  ctx.fill();
				  
				  ctx.fillStyle = fstyle;
				  ctx.globalCompositeOperation = gdest;
				  


				  
				  //round rect
				  ctx.beginPath();
				  ctx.moveTo(x + radius, y);
				  ctx.lineTo(x + width - radius, y);
				  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
				  ctx.lineTo(x + width, y + height - radius);
				  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
				  ctx.lineTo(x + radius, y + height);
				  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
				  ctx.lineTo(x, y + radius);
				  ctx.quadraticCurveTo(x, y, x + radius, y);
				  ctx.closePath(); 			  
				  if (stroke) {
					ctx.stroke();
				  }
				  if (fill) {
					ctx.fill();
				  } 
	 

				}

				
				var ii = 0;		
				function isNumber(n) 
				{
				  return !isNaN(parseFloat(n)) && isFinite(n);
				}
				
				function drawCanvas(percentage, canvasid)
				{			
											
					var error = !isNumber(percentage);
					
					if (!error && (percentage < 0 || percentage > 100))
					{
						error = true;
					}
					
					percentage = percentage.toString().replace(/[^0-9]/g, '');
					var canvas = $('#'+canvasid);
					canvas.clear = true;
					canvas = document.getElementById('cvs');
					if(canvas.getContext){
						var context = canvas.getContext('2d');
						context.clearRect(0,0,canvas.width,canvas.height);
						
						context.fillStyle = "#FFC6C1";
						context.fillRect(0, 0, canvas.width, canvas.height);
						
						var percWidth = Math.round(canvas.width / 100);
						
						if (!error)
						{
							for (var i = 0; i<= percentage; i++)
							{						
								var r,g,b;
								if (i <= 50)
								{
									r = 255;
									g = Math.round((255*i)/50);
									b = 0;
								}
								else
								{
									r = Math.round((255*(100-i))/50);
									g = 255;
									b = 0
								}						
								context.fillStyle = "rgb("+r+", "+g+", "+b+")";
								context.fillRect(Math.round(i*canvas.width / 100)-percWidth, 0, percWidth, canvas.height);					
							}
							
							context.font = "bold 20px sans-serif";
							context.fillStyle = "rgb(255,255,255)";
							context.textBaseline = "middle";
							var msg = percentage + "%";
						}
						else
						{
							context.fillStyle = "rgb(255,0,0)";
							context.fillRect(0,0,canvas.width, canvas.height);
							context.font = "bold 20px sans-serif";
							context.fillStyle = "rgb(255,255,255)";
							context.textBaseline = "middle";
							var msg = "Sin Acceso";
						}
						
						context.fillStyle = "#2B2D42";
						context.fillText(msg, (canvas.width/2)-(context.measureText(msg).width/2)+2 , canvas.height/2+2);
						/*context.fillStyle = "rgb(90,90,90)";
						context.fillText(msg, (canvas.width/2)-(context.measureText(msg).width/2)+1 , canvas.height/2+1);*/
						context.fillStyle = "#FFFAFF";
						context.fillText(msg, (canvas.width/2)-(context.measureText(msg).width/2) , canvas.height/2);
						/*context.strokeText(msg, (canvas.width/2)-(context.measureText(msg).width/2) , canvas.height/2);*/
						
						
						
						
						context.fillStyle = "rgb(0, 0, 0)";					
						roundRect(context, 0,0,canvas.width,canvas.height,5);
					}
					
				}
				function drawCanvas1(percentage, canvasid)
				{			
											
					var error = !isNumber(percentage);
					
					if (!error && (percentage < 0 || percentage > 100))
					{
						error = true;
					}
					
					percentage = percentage.toString().replace(/[^0-9]/g, '');
					var canvas = $('#'+canvasid);
					canvas.clear = true;
					canvas = document.getElementById('ordenes_cero');
					if(canvas.getContext){
						var context = canvas.getContext('2d');
						context.clearRect(0,0,canvas.width,canvas.height);
						
						context.fillStyle = "#FFC6C1";
						context.fillRect(0, 0, canvas.width, canvas.height);
						
						var percWidth = Math.round(canvas.width / 100);
						
						if (!error)
						{
							for (var i = 0; i<= percentage; i++)
							{						
								var r,g,b;
								if (i <= 50)
								{
									r = 255;
									g = Math.round((255*i)/50);
									b = 0;
								}
								else
								{
									r = Math.round((255*(100-i))/50);
									g = 255;
									b = 0
								}						
								context.fillStyle = "rgb("+r+", "+g+", "+b+")";
								context.fillRect(Math.round(i*canvas.width / 100)-percWidth, 0, percWidth, canvas.height);					
							}
							
							context.font = "bold 20px sans-serif";
							context.fillStyle = "rgb(255,255,255)";
							context.textBaseline = "middle";
							var msg = percentage + "%";
						}
						else
						{
							context.fillStyle = "rgb(255,0,0)";
							context.fillRect(0,0,canvas.width, canvas.height);
							context.font = "bold 20px sans-serif";
							context.fillStyle = "rgb(255,255,255)";
							context.textBaseline = "middle";
							var msg = "Sin Acceso";
						}
						
						context.fillStyle = "#2B2D42";
						context.fillText(msg, (canvas.width/2)-(context.measureText(msg).width/2)+2 , canvas.height/2+2);
						/*context.fillStyle = "rgb(90,90,90)";
						context.fillText(msg, (canvas.width/2)-(context.measureText(msg).width/2)+1 , canvas.height/2+1);*/
						context.fillStyle = "#FFFAFF";
						context.fillText(msg, (canvas.width/2)-(context.measureText(msg).width/2) , canvas.height/2);
						/*context.strokeText(msg, (canvas.width/2)-(context.measureText(msg).width/2) , canvas.height/2);*/
						
						
						
						
						context.fillStyle = "rgb(0, 0, 0)";					
						roundRect(context, 0,0,canvas.width,canvas.height,5);
					}
					
				}
				function drawCanvas2(percentage, canvasid)
				{			
											
					var error = !isNumber(percentage);
					
					if (!error && (percentage < 0 || percentage > 100))
					{
						error = true;
					}
					
					percentage = percentage.toString().replace(/[^0-9]/g, '');
					var canvas = $('#'+canvasid);
					canvas.clear = true;
					canvas = document.getElementById('objetivo_progress');
					if(canvas.getContext){
						var context = canvas.getContext('2d');
						context.clearRect(0,0,canvas.width,canvas.height);
						
						context.fillStyle = "#FFC6C1";
						context.fillRect(0, 0, canvas.width, canvas.height);
						
						var percWidth = Math.round(canvas.width / 100);
						
						if (!error)
						{
							for (var i = 0; i<= percentage; i++)
							{						
								var r,g,b;
								if (i <= 50)
								{
									r = 255;
									g = Math.round((255*i)/50);
									b = 0;
								}
								else
								{
									r = Math.round((255*(100-i))/50);
									g = 255;
									b = 0
								}						
								context.fillStyle = "rgb("+r+", "+g+", "+b+")";
								context.fillRect(Math.round(i*canvas.width / 100)-percWidth, 0, percWidth, canvas.height);					
							}
							
							context.font = "bold 20px sans-serif";
							context.fillStyle = "rgb(255,255,255)";
							context.textBaseline = "middle";
							var msg = percentage + "%";
						}
						else
						{
							context.fillStyle = "rgb(255,0,0)";
							context.fillRect(0,0,canvas.width, canvas.height);
							context.font = "bold 20px sans-serif";
							context.fillStyle = "rgb(255,255,255)";
							context.textBaseline = "middle";
							var msg = "Sin Acceso";
						}
						
						context.fillStyle = "#2B2D42";
						context.fillText(msg, (canvas.width/2)-(context.measureText(msg).width/2)+2 , canvas.height/2+2);
						/*context.fillStyle = "rgb(90,90,90)";
						context.fillText(msg, (canvas.width/2)-(context.measureText(msg).width/2)+1 , canvas.height/2+1);*/
						context.fillStyle = "#FFFAFF";
						context.fillText(msg, (canvas.width/2)-(context.measureText(msg).width/2) , canvas.height/2);
						/*context.strokeText(msg, (canvas.width/2)-(context.measureText(msg).width/2) , canvas.height/2);*/
						
						
						
						
						context.fillStyle = "rgb(0, 0, 0)";					
						roundRect(context, 0,0,canvas.width,canvas.height,5);
					}
					
				}
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js"></script>
<script src="https://rawgit.com/arqex/react-json/master/build/Json.js"></script>
<script src="//cdn.jsdelivr.net/refluxjs/0.2.11/reflux.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

<script type="text/javascript">
	function valor(value){
		$( "#total_pronostico" ).text("Total: " + value + " MXN");
		
	};	
	function valor1(value){
		$( "#importe_facturado" ).text("Cumplimiento del objetivo " + value + " MXN");
	};
	function valor2(value){
		$( "#conteo" ).text(value);
		
	};	
	function valor3(value){
		$( "#rest" ).text(value);
	};
	function valor4(value){
		$( "#o" ).text(value + " días");
	};

	function valor5(value){
		$( "#contador" ).text(value);
	};
	
	$( "#ver" ).click(function() {
  		$( "#detalles" ).toggle( "slow", function() {
    // Animation complete.
  });
	});
</script>

<script type="text/jsx">
	/*
	 *  Title
	 */

    var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = decodeURIComponent(window.location.search.substring(1)),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : sParameterName[1];
            }
        }
    };


        var empresa = getUrlParameter('app_id');
        var type = getUrlParameter('type');
        var url = "api/v1/empresa?app_id=" + empresa + "&type=" + type
        var url1 = "api/v1/porcentaje?app_id=" + empresa
        var url2 = "api/v1/objetivo_real?app_id=" + empresa + "&type=" + type
        var url3 = "api/v1/get_objetivo?app_id=" + empresa + "&type=" + type
        var url4 = "api/v1/ordenes_internas?app_id=" + empresa 
        var url5 = "/api/v1/mayores?app_id=" + empresa 
        var url6 = "api/v1/pronostico?app_id=" + empresa
        var url7 = "api/v1/abiertas?app_id=" + empresa
        var url8 = "api/v1/costo?app_id=" + empresa
        var url9 = "api/v1/facturadas?app_id=" + empresa
        var url10 = "api/v1/internas?app_id=" + empresa
        var url11 = "api/v1/conteo_internas?app_id=" + empresa
        var url12 = "api/v1/dias?app_id=" + empresa

        var Notificacion = React.createClass({
        getInitialState: function() {
                  return {
                    data: ""
                  };
                },
                componentDidMount: function() {
                  var self = this;
                  $.get(this.props.source, function(result) {
                    var collection = result;
                    if (this.isMounted()) {
                      this.setState({
                        data: collection
                      });
                    }
                  }.bind(this));
                  setInterval(this.consulta, 10000);
                },
                consulta: function(){
                var self = this;
                  $.get(this.props.source, function(result) {
                    var collection = result;
                    if (this.isMounted()) {
                      this.setState({
                        data: collection
                      });
                    }
                  }.bind(this));
                },
        
        render: function() {   
                var dias = this.state.data.dias
                var aler = this.state.data.alerta
            if (aler == "1" ){
                            return <span>
                                      <div className="alert alert-warning fade in m-b-10">
                                        <strong>Atención! -- </strong>
                                        Estimado concesionario le quedan <strong>{dias} </strong>
                                            día(s) para que venza tú servicio, favor de realizar tu pago lo antes posible.
                                        </div>
                                    </span>

            }
            else {
                if (dias == 0 ){
                return <span></span>
                }
                else
                {
                 return  <span></span>
                }
            }
                   
                                    
                    
            
                    }
        });
        
        React.render(
                <Notificacion source={url12}/>,
         document.getElementById('alerta')
         );

      
		var Empresa = React.createClass({
		       getInitialState: function() {
		          return {
		            data: ""
		          };
		        },
		        componentDidMount: function() {
		          var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		          setInterval(this.consulta, 10000);
		        },
		        consulta: function(){
				var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		        },
		        render: function() {   
		          return (
		            <span>
		             {this.state.data}     
		            </span>
		          );
		        }
		      });

		     React.render(
		    <Empresa source={url} />,
		      document.getElementById('empresa')
		 );
/*
 *  Porcentaje
 */
	var Porcentaje = React.createClass({
		getInitialState: function() {
		          return {
		            data: ""
		          };
		        },
		      
		        componentDidMount: function() {
		          var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		          setInterval(this.consulta, 10000);

		        },
		        consulta: function(){
				var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		        },
		        render: function() { 
		        	var self = this     	
		            drawCanvas(this.state.data ,'cvs');   
		          return (
		            <span>
		               
		            </span>
		          );
		        }
		      });

		     React.render(
		    <Porcentaje source={url1}/>,
		      document.getElementById('progress')
		 );
/*
 * Modulo Objetivo Real
 */
			var ObjetivoReal = React.createClass({
		       getInitialState: function() {
		          return {
		            data: ""
		          };
		        },
		      
		        componentDidMount: function() {
		          var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		          setInterval(this.consulta, 10000);
		        },
		        consulta: function(){
				 var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		          
		        },
		        render: function() { 
		        var self = this 
		        var valor = this.state.data.objetivo
		          return (
		            <span>
		             {valor} MXN 
		            </span>
		          );
		        }
		      });

		     React.render(
		    <ObjetivoReal source={url2} />,
		      document.getElementById('objetivo_real')
		 );
	/*
	 * Modulo Objetivo Obligado
	 */
			var Objetivo = React.createClass({
		       getInitialState: function() {
		          return {
		            data: ""
		          };
		        },
		      
		        componentDidMount: function() {
		          var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		          setInterval(this.consulta, 10000);
		        },
		        consulta: function(){
				 var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		          
		        },
		        render: function() { 
		        var self = this 
		        var valor = this.state.data.objetivo
		          return (
		            <span>
		             {valor} MXN 
		            </span>
		          );
		        }
		      });

		     React.render(
		    <Objetivo source={url3} />,
		      document.getElementById('objetivo')
		 );

	/*
	 * Modulo Detalles Internas
	 */
		var Detalles = React.createClass({
		onClick: function() {
			$.ajax({
		        url: url4 ,
		        dataType: 'json',
		        success: function(data) {
		          this.setState({data: data});
		        }.bind(this)
			});
			this.setState({boton_cancelar: <div id="ver" className="btn btn-warning" onClick={this.close}>Ocultar</div>});
			this.setState({button: ""});
			this.setState({visible: "table table-bordered table-hover"});


		},
		close: function(){
			this.setState({data: []});
			this.setState({boton_cancelar: ""});
			this.setState({button: <div id="ver" className="btn btn-inverse width-100" onClick={this.onClick}>Ver detalles</div>});
			this.setState({visible: "table table-bordered table-hover visible"});

		},

		
		getInitialState: function() {
		          return {
		          	data: [],
		         	button: <div id="ver" className="btn btn-inverse width-100" onClick={this.onClick}>Ver detalles</div>,
		         	boton_cancelar:"",
		         	visible: "table table-bordered table-hover visible"
		     
		            };	       
		        },
		
		render: function() {   
				var contador = this.state.contar
				var subir = items
				var url = "unirs/new?event="
				
						var items = this.state.data.map(function(object){
							return <tr>
								     <td><strong>{object.orden}</strong></td>
								     <td>{object.importe} MXN</td>
							       </tr>
							});
								
			 			return <div>
			 					{this.state.button}{this.state.boton_cancelar}
								<table className={this.state.visible}>
									<thead>
									<tr>
									<th>Número de Orden</th>
									<th>Importe</th>
									</tr>
									</thead>
									<tbody>
									{items}
									</tbody>
							 	</table>
								</div>
			
			 		}
		});
		
		React.render(
		     	<Detalles />,
		 document.getElementById('detalles')
		 );

	/*
	 * Modulo Detalles Mayores
	 */
		var DetallesMayores = React.createClass({
		onClick: function() {
			$.ajax({
		        url: url5 ,
		        dataType: 'json',
		        success: function(data) {
		          this.setState({data: data});
		        }.bind(this)
			});
			this.setState({boton_cancelar: <div id="ver" className="btn btn-warning" onClick={this.close}>Ocultar</div>});
			this.setState({button: ""});
			this.setState({visible: "table table-bordered table-hover"});


		},
		close: function(){
			this.setState({data: []});
			this.setState({boton_cancelar: ""});
			this.setState({button: <div id="ver" className="btn btn-inverse width-100" onClick={this.onClick}>Ver detalles</div>});
			this.setState({visible: "table table-bordered table-hover visible"});

		},

		
		getInitialState: function() {
		          return {
		          	data: [],
		         	button: <div id="ver" className="btn btn-inverse width-100" onClick={this.onClick}>Ver detalles</div>,
		         	boton_cancelar:"",
		         	visible: "table table-bordered table-hover visible"
		     
		            };	       
		        },
		
		render: function() {   	
						var items = this.state.data.map(function(object){
							if (object.dias <= 15){
							return <tr className="warning"> 
								     <td><strong>{object.orden}</strong></td>
								     <td>{object.importe} MXN</td>
								     <td>{object.fecha}</td>
								     <td><strong>{object.dias}</strong></td>
							       </tr>
								}	
								else
								{
								return	<tr className="danger">
								     <td><strong>{object.orden}</strong></td>
								     <td>{object.importe} MXN</td>
								     <td>{object.fecha}</td>
								     <td><strong>{object.dias}</strong></td>
							       </tr>
								}
							 });
								
			 			return <div>
			 					{this.state.button}{this.state.boton_cancelar}
								<table className={this.state.visible}>
									<thead>
									<tr>
									<th>Número de Orden</th>
									<th>Importe</th>
									<th>Fecha Alta</th>
									<th>Total de Días</th>
									</tr>
									</thead>
									<tbody>
									{items}
									</tbody>
							 	</table>
								</div>
			
			 		}
		});
		
		React.render(
		     	<DetallesMayores />,
		 document.getElementById('detalles_mayores')
		 );
	/*
	 *  Ordenes Recomendadas
	 */
		var OrdenesRecomendadas = React.createClass({
		componentDidMount: function() {
			$.ajax({
		        url: url6,
		        dataType: 'json',
		        success: function(data) {
		          this.setState({data: data});
		          this.setState({importe: this.state.data[0].total});
		          this.setState({conteo:  this.state.data[0].totalordenes});
		          this.setState({resta:  this.state.data[0].resta});  
		          this.setState({porcentaje:  this.state.data[0].porcentaje}); 
		          this.setState({importe_facturado:  this.state.data[0].importe_facturado});
		          this.setState({total:  this.state.data[0].importe_venta});
		          this.setState({porcentaje_venta:  this.state.data[0].porcentaje_venta});
		          this.setState({dias:  this.state.data[0].dias});
		          this.setState({contador:  this.state.data[0].contador});
		        }.bind(this)
			});
			setInterval(this.consulta, 60000);  
		},
		consulta: function(){
		$.ajax({
		        url: url6,
		        dataType: 'json',
		        success: function(data) {
		          this.setState({data: data});
		          this.setState({importe: this.state.data[0].total}); 
		          this.setState({conteo:  this.state.data[0].totalordenes});
		          this.setState({resta:  this.state.data[0].resta});
		          this.setState({porcentaje:  this.state.data[0].porcentaje});
		          this.setState({importe_facturado:  this.state.data[0].importe_facturado});
		          this.setState({total:  this.state.data[0].importe_venta});
		          this.setState({porcentaje_venta:  this.state.data[0].porcentaje_venta});
		          this.setState({dias:  this.state.data[0].dias});
		          this.setState({contador:  this.state.data[0].contador});
		        }.bind(this)
			});
		},
		getInitialState: function() {
		          return {
		          	data: [],
		          	importe: "",
		          	conteo: "",
		          	resta:"",
		          	porcentaje: "",
		          	importe_facturado: "",
		          	total: "",
		          	porcentaje_venta:"",
		          	dias: "",
		          	contador:""
		            };	       
		        },

		render: function() {  
					var por = this.state.porcentaje
					var por1 = this.state.porcentaje_venta
					drawCanvas1(por ,'ordenes_cero'); 
					drawCanvas2(por1 ,'objetivo_progress');
					var val = this.state.total
					valor(val);
					var val1 = this.state.importe_facturado
					valor1(val1);
					var imp  = this.state.importe
					var cont = this.state.conteo
					valor2(cont);
					var rest = this.state.resta
					valor3(rest);
					var i = this.state.total
					var dias = this.state.dias
					valor4(dias);
					var contar = this.state.contador
					valor5(contar);
					var items = this.state.data.map(function(object){
						var comillaInicio = '"'
						var comillaFin = '"'
						return 	<span><strong>{comillaInicio + object.ordenes + comillaFin}</strong> , </span>
						});
			 			return <span> 					
			 			       <div> {items} con un valor de <strong className="verde">{imp}</strong> MXN, este seria su pronóstico.</div>	
			 			       </span>
			 		}

	});	

		React.render(
		     	<OrdenesRecomendadas />,
		 document.getElementById('ordenes_recomendadas')
		 );

	/*
	 *  Conteo Ordenes
	 */
		var Conteo = React.createClass({
		       getInitialState: function() {
		          return {
		            data: ""
		          };
		        },
		      
		        componentDidMount: function() {
		          var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		          setInterval(this.consulta, 10000);
		        },
		        consulta: function(){
		        	var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		      },
		        render: function() {   
		          return (
		            <span>
		             {this.state.data}     
		            </span>
		          );
		        }
		      });

		     React.render(
		    <Conteo source={url7} />,
		      document.getElementById('ordenes_abiertas')
		 );
		/*
		 *  Costo Ordenes Abiertas
		 */
		var Costo = React.createClass({
		       getInitialState: function() {
		          return {
		            data: ""
		          };
		        },
		      
		        componentDidMount: function() {
		          var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		          setInterval(this.consulta, 10000);
		        },
		        consulta: function(){
		        var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		        },
		        render: function() {   
		          return (
		            <span>
		             {this.state.data} MXN     
		            </span>
		          );
		        }
		      });

		     React.render(
		    <Costo source={url8} />,
		      document.getElementById('costo')
		 );
		/*
		 *  Costo Ordenes Facturadas
		 */
		var Facturadas = React.createClass({
		       getInitialState: function() {
		          return {
		            data: ""
		          };
		        },
		      
		        componentDidMount: function() {
		          var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		          setInterval(this.consulta, 10000);
		        },
		        consulta: function(){
		        	var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		      },
		        render: function() {   
		          return (
		            <span>
		             {this.state.data}     
		            </span>
		          );
		        }
		      });

		     React.render(
		    <Facturadas source={url9} />,
		      document.getElementById('facturadas')
		 );
		 /*
		 *  Costo Ordenes Internas
		 */
		var CostoInternas = React.createClass({
		       getInitialState: function() {
		          return {
		            data: ""
		          };
		        },
		      
		        componentDidMount: function() {
		          var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		          setInterval(this.consulta, 10000);
		        },
		        consulta: function(){
		        var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));		
		        },
		        render: function() {   
		          return (
		            <span>
		             {this.state.data} MXN    
		            </span>
		          );
		        }
		      });

		     React.render(
		    <CostoInternas source={url10} />,
		      document.getElementById('costo_internas')
		 );
   /*
	*  Conteo Ordenes Internas
	*/
		var ConteoInternas = React.createClass({
		       getInitialState: function() {
		          return {
		            data: ""
		          };
		        },
		      
		        componentDidMount: function() {
		          var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		           setInterval(this.consulta, 10000);
		        },
		        consulta: function(){
		        	 var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		     	 },
		        render: function() {   
		          return (
		            <span>
		             {this.state.data}     
		            </span>
		          );
		        }
		      });

		     React.render(
		    <ConteoInternas source={url11} />,
		      document.getElementById('ordenes_internas')
		 );
    /*
	*  Conteo Ordenes Internas
	*/
		var Fecha = React.createClass({
		       getInitialState: function() {
		          return {
		            data: ""
		          };
		        },
		        componentDidMount: function() {
		          var self = this;
		          $.get(this.props.source, function(result) {
		            var collection = result;
		            if (this.isMounted()) {
		              this.setState({
		                data: collection
		              });
		            }
		          }.bind(this));
		        },
		        render: function() {   
		          return (
		            <span>
		             {this.state.data}     
		            </span>
		          );
		        }
		      });

		     React.render(
		    <Fecha source="api/v1/fecha" />,
		      document.getElementById('fecha')
		 );
</script>
